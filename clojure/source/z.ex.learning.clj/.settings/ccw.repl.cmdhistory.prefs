cmdhistory=["(require 'z.ex.paulweb515)" "(println z.ex.paulweb515/n1)" ";; Switching to z.ex.paulweb515 namespace" "(println n1)" "(println paul-person \:name)" "(println (paul-person \:name))" "(println (\:name paul-person))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'z.ex.json)))" ";; Switching to z.ex.json namespace" "(z.ex.json/-main)" "(z.ex.json/run-tst)" "(z.ex.json/-main)" "(z.ex.json/get-component-json)" "(count z.ex.scratch/cars)" "(z.ex.scratch/cars)" "(println z.ex.scratch/cars)" "(println z.ex.scratch/projects)" "(get z.ex.scratch/components \\"Dialogs\\")" "(map (fn [repo] (println (str \\"Repo\: \\" repo))) z.ex.scratch/projects)" "(z.ex.scratch/print-repo z.ex.scratch/projects)" "(println z.ex.scratch/paul-person)" "(get-in z.ex.scratch/paul-person [\:employer \:address \:street])" "(z.ex.scratch/print-street)" "(z.ex.scratch/print-street z.ex.scratch/paul-person)" "(z.ex.scratch/test-loop)" "(z.ex.scratch/test-loop 4)" "(refer 'z.ex.scratch)" "(print-street)" "(print-street paul-person)" "(println (meta paul-person))" "(println (meta print-repo))" "(meta (var paul-person))" "(z.ex.scratch/processed-list)" "(println z.ex.scratch/processed-list)" "(require 'z.ex.scratch)" "(println pre-tokenizedlist)" "(println pre-tokenized-list)" "(refer 'z.ex.scratch)" "(println pre-tokenized-list)" "(count-item processed-list \\"was\\")" "(count-item processed-list \\"paul\\")" "(seq processed-list)" "(peek processed-list)" "(first processed-list)" "(pop processed-list)" "(rest processed-list)" "(count-item processed-list \\"paul\\")" "(count-item processed-list \\"was\\")" "(count-item-recur processed-list \\"was\\")" "(count-item-recur processed-list \\"was\\" 0)" "(count-item-recur processed-list \\"was\\" 2)" "(count-item-loop processed-list \\"was\\")" "(count-item-cond)" "(refer 'z.ex.scratch)" "(count-item-loop processed-list \\"was\\")" "(count-item-cond processed-list \\"was\\")" "(refer 'z.ex.scratch)" "(count-item-internal-fn processed-list \\"was\\")" "(refer 'z.ex.word)" "(lower-case-test)" "(refer 'z.ex.word)" "(token-test)" "(refer 'z.ex.word)" "(token-test)" "(lower-case-test)" "(z.ex.word/token-test)" "(printf z.ex.word/token-test)" "(printf (z.ex.word/token-test))" "(first (z.ex.word/token-test))" "(dorun (z.ex.word/token-test))" "(doseq\\n  (z.ex.word/token-test))" "(z.ex.word/tokenize-str \\"This is a LIST OF TOKENS.\\")" "(doall (z.ex.word/tokenize-str \\"This is a LIST OF TOKENS.\\"))" "(re-seq z.ex.word/token-regex \\"This is a LIST OF TOKENS.\\")" "(doall (re-seq z.ex.word/token-regex \\"This is a LIST OF TOKENS.\\"))" "(re-seq z.ex.word/token-regex \\"This is a LIST OF TOKENS.\\")" "(println z.ex.word/token-regex)" "(re-seq \#\\"\\\\\\\\w+\\" \\"Paul was here\\")" "(re-seq \#\\"\\\\\\\\w+\\" \\"This string contains\\")" "(re-seq \#\\"\\\\w+\\" \\"This string contains\\")" "(z.ex.word/token-test)" "(clojure.core/ns z.ex.word)\\n(defn tokenize-str [input-string]\\n  (map to-lower-case (re-seq token-regex input-string)))\\n(clojure.core/ns user)" "(z.ex.word/stop-words \\"of\\")" "(z.ex.word/stop-words \\"whatever\\")" "(z.ex.word/filter-test)" "(z.ex.word/filter-str-test)" "(z.ex.word/filter-test)" "(z.ex.word/tokenize-file-test)"]
eclipse.preferences.version=1
